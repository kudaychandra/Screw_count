| Function & Signature                                                                        | Purpose                                                                                                                                                                                                                                            |
| ------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **`cv2.imread(path, flags=cv2.IMREAD_COLOR)`**                                              | Load an image from disk into a NumPy array.                                                                                                                                                                                                        |
| **`cv2.cvtColor(src, code)`**                                                               | Convert color spaces. E.g.:<br>`cv2.COLOR_BGR2GRAY` to go from BGR → Gray;<br>`cv2.COLOR_BGR2RGB` to go from BGR → RGB for Matplotlib.                                                                                                             |
| **`cv2.GaussianBlur(src, ksize, sigmaX)`**                                                  | Smooth / denoise an image with a Gaussian kernel of size `ksize` (must be odd), standard deviation `sigmaX`.                                                                                                                                       |
| **`cv2.threshold(src, thresh, maxval, type)`**                                              | Binarize an image:<br>– `type=cv2.THRESH_BINARY` or `cv2.THRESH_BINARY_INV`;<br>– add `+ cv2.THRESH_OTSU` to auto-compute the best threshold.                                                                                                      |
| **`cv2.adaptiveThreshold(src, maxval, adaptiveMethod, thresholdType, blockSize, C)`**       | Locally adaptive binarization (e.g. mean or Gaussian weighted), useful for uneven lighting.                                                                                                                                                        |
| **`cv2.morphologyEx(src, op, kernel, iterations)`**                                         | General morphological operations:<br>– `op=cv2.MORPH_OPEN` (erosion→dilation) to remove small foreground noise;<br>– `op=cv2.MORPH_CLOSE` (dilation→erosion) to fill small holes;<br>– others: `MORPH_GRADIENT`, `MORPH_TOPHAT`, `MORPH_BLACKHAT`. |
| **`cv2.getStructuringElement(shape, ksize)`**                                               | Create a kernel (e.g. `cv2.MORPH_RECT`, `cv2.MORPH_ELLIPSE`) for morphology.                                                                                                                                                                       |
| **`cv2.erode(src, kernel, iterations)`** / **`cv2.dilate(src, kernel, iterations)`**        | Primitive morphological ops: shrink (`erode`) or expand (`dilate`) white regions.                                                                                                                                                                  |
| **`cv2.findContours(src, mode, method)`**                                                   | Extract contours (outlines) from a binary image:<br>– `mode=cv2.RETR_EXTERNAL` to get only outer contours;<br>– `method=cv2.CHAIN_APPROX_SIMPLE` to compress straight segments.                                                                    |
| **`cv2.drawContours(image, contours, contourIdx, color, thickness)`**                       | Render contour outlines onto an image.                                                                                                                                                                                                             |
| **`cv2.bitwise_and(src1, src2)`** / **`cv2.bitwise_not(src)`**, etc.                        | Logical operations for masking / inverting binary images.                                                                                                                                                                                          |
| **`cv2.Canny(src, threshold1, threshold2)`**                                                | Edge detection using the Canny algorithm.                                                                                                                                                                                                          |
| **`cv2.resize(src, dsize, fx, fy, interpolation)`**                                         | Scale an image by factors `fx`,`fy` or to absolute size `dsize`.                                                                                                                                                                                   |
| **`cv2.GoodFeaturesToTrack`**, **`cv2.calcOpticalFlowPyrLK`**, etc.                         | Feature detection & tracking (e.g., corners, optical flow).                                                                                                                                                                                        |
| **`cv2.equalizeHist(src)`**                                                                 | Improve contrast by histogram equalization (on grayscale images).                                                                                                                                                                                  |
| **`cv2.imwrite(path, image)`**                                                              | Save an image (binary or color) to disk.                                                                                                                                                                                                           |
| **`cv2.imshow(winname, image)`** / **`cv2.waitKey(delay)`** / **`cv2.destroyAllWindows()`** | Display images in GUI windows and handle key events / cleanup.                                                                                                                                                                                     |
